\documentclass[11pt,b5paper,oneside]{ltjsbook}

\usepackage{graphicx}
\usepackage{color}
\usepackage{here}
\usepackage{framed}
\usepackage{tcolorbox}
\usepackage{quotchap}
\usepackage{pdfpages}
\usepackage[hidelinks]{hyperref}
\usepackage{listings,jvlisting}
\usepackage{titlesec}
\usepackage{picture}
\usepackage{tikz}
\usepackage{luatexja}
\usepackage{amsmath}
\usepackage{url}
\usepackage{lmodern}
\tcbuselibrary{breakable}
\definecolor{shadecolor}{gray}{0.80}

\usepackage{listings}
\usepackage{xcolor}

\lstset{
  basicstyle=\ttfamily\footnotesize,
  breaklines=true, % コードを自動で折り返す
  postbreak=\mbox{\textcolor{red}{$\hookrightarrow$}\space}, % 折り返し部分のマーク
  numbers=left, % 行番号の位置
  numberstyle=\tiny\color{gray}, % 行番号のスタイル
  frame=single, % コード周りに枠をつける
  backgroundcolor=\color{lightgray!10}, % 背景色
  rulecolor=\color{black}, % 枠の色
  tabsize=4, % タブの大きさ
  captionpos=b, % キャプションの位置（b: bottom）
  escapeinside={(*@}{@*)}, % LaTeX コマンドをコード中に書くためのエスケープ記号
}

\titleformat{\section}[block]{}{}{0pt}{
  \definecolor{teal}{gray}{0.30}
  \begin{picture}(0,0)
    \put(-10,-5){
      \begin{tikzpicture}
        \fill[teal] (0pt,0pt) rectangle (5pt,19pt);
      \end{tikzpicture}
    }
    \put(-10,-5){
      \color{teal}
      \line(1,0){\hsize}
    }
  \end{picture}
  \hspace{0pt}
  \sf \Large \thesection
  \hspace{0pt}
}
\renewcommand{\tablename}{\textcolor{gray}{▼} 表}
\renewcommand{\figurename}{\textcolor{gray}{▲} 図}

\title{心電図の取得からストレス測定}
\author{ちゃちゃ}
\date{March 2024}

\begin{document}
\maketitle
\tableofcontents
\chapter{前書き}
\section{本書のコンセプト}
本書では、心電図を用いて、ストレス度の解析を行なっていきます。

心電図について基本的な解説から始め、市販の製品を使って心電図を取得する方法、その前処理について詳しく説明します。
最後に、心拍変動指標を利用したストレス度の解析方法を行います。

本書を通して、心電図と心電図から取得することができる心拍変動指標がもつ可能性をお伝えし、新たな応用分野が広がることを期待しています。

実装の全てのコードはGitHubで公開していますので、そちらもぜひご覧ください。リポジトリのURLは[こちら]です。
合わせてご覧ください。

\section{想定読者}
\begin{quote}
\begin{itemize}
\item 心拍・心電図という単語を聞いたことがある・興味がある方
\item python・機械学習に興味がある方・触ったことがある方
\end{itemize}
\end{quote}
本書では、センサーから心電図の取得、前処理、HRV解析、ストレス指標の解析を行います。


\chapter{心電図って何？}
心電図(ECG: Electrocardiogram)とは、心臓の活動を記録した波形のことです。心臓は拡張と収縮を繰り返しながら血液を送り出していますが、この活動に伴って微小な電気信号が発生します。心電図はこの電気信号の変化を体表面から誘導して記録したものです。心臓の動きそのものを可視化できる重要な医療検査の一つとして広く利用されています。

\subsection{心電図の波}
心電図には心臓の拡張と収縮を示すいくつかの波形成分があります。図2.1参照\cite{心電図画像}


\begin{figure}[h] % 'h' here, 't' top, 'b' bottom, 'p' page of floats.
\centering % to center the figure
\includegraphics[width=135mm]{heart-stimulus-transmission-system-ECG-electro.png}
\caption{心電図の波形と拍動の動き} % Caption for the figure
\label{fig:ecg_drift} % Label to refer to the figure
\end{figure}

最初に現れるのが上向きのP波で、次に小さな下向き波(Q波)、鋭いスパイク状のR波、さらに小さな下向き波(S波)が続きます。
これらQ、R、S波を合わせてQRS群と呼びます。最後に上向きの緩やかな波(T波)が現れます。
このQRSTが一つの心臓の拍動で生まれる波形です。


\subsection{心電図の取得}
現在、Apple watchなどの多くのスマートウォッチなどで心電センサーが搭載され、モードによって心電図や心拍などを取得することができます。
もちろん、それらでも心電図の取得は可能かもしれませんが、本書ではいくつかの論文でも使用されているPolar H10という心電図センサーを使用したいと思います。このセンサーは、市販されており、polar社が開発・販売している胸部に巻くセンサーのタイプです。(販売価格 : 15400円)後述する実装のチャプターでは、Polar H10とパソコンをBluetooth Low Energyで接続し、取得した筆者の心電図を使用し、解析を行なっていきます。


\subsection{心拍変動性}
心電図には「心拍変動性」という重要な特徴があります。この特徴を活用することで、ストレス度や感情を推定することが可能になります。
心拍変動とは、心臓の拍動間隔が規則正しくなく、ばらついている現象を指します。具体的には、心電図のR波とR波の間隔（RRI）が一定ではなく、ミリ秒単位で変化しています。
この拍動間隔の揺らぎは「心拍変動（HRV: Heart Rate Variability）」と呼ばれ、自律神経の交感神経と副交感神経の活動のバランスを反映します。感情は自律神経系の活動と密接に関連しているため心拍変動はストレス度や感情を推定する貴重な手がかりです。


\chapter{実践}
このチャプターでは、センサーを用い心電図を取得し、心拍変動解析を行い、ストレス度を測定の実装を行います。
また、実装の全てのコードはGitHubで公開していますので、そちらもぜひご覧ください。リポジトリのURLは[こちら]です。


\section{ストレス度の測定}
\subsection{ライブラリの紹介}
本ハンズオンでは、心電図データから心拍数や心拍変動指標を計算・分析するために以下の３つのライブラリが特に重要です。
\begin{itemize}
    \item \textbf{HeartPy} (\texttt{heartpy}):
    \begin{itemize}
        \item \textbf{主な用途}: 心電図からの心拍数やその他の心拍変動指標を計算することに特化しています。
    \end{itemize}
    
    \item \textbf{BioSPPy} (\texttt{biosppy.signals.ecg}):
    \begin{itemize}
        \item \textbf{主な用途}: 心電図(ECG)信号からのピーク検出や波形の特徴抽出をはじめとした広い生体情報を取り扱います。
    \end{itemize}
    
    \item \textbf{HRVAnalysis} (\texttt{hrvanalysis}):
    \begin{itemize}
        \item \textbf{主な用途}: 心拍変動(HRV)の詳細な解析を行います。心拍間隔データからHRV指標を計算する前に、外れ値の除去や欠損値の補間などの前処理を提供し、信頼性の高いHRV解析を行うことができます。
    \end{itemize}
\end{itemize}


\begin{lstlisting}[language=Python]
...
import heartpy as hp
from biosppy.signals import ecg
from scipy.signal import iirnotch, lfilter
from hrvanalysis import remove_outliers, remove_ectopic_beats, interpolate_nan_values
\end{lstlisting}



\subsection{心電図データの取得}
心電図センサーであるPolar H10を使用して、心電図を取得します。
Polar H10とPC間でBLE(Bluetooth Low Energy)通信を行い、データをcsv形式で保存します。
心拍変動解析を行う場合は、少ないデータでは行えず、解析結果の信頼性が落ちるという特徴があります。
医学的な HRV 解析ガイドラインでは、周波数解析を正確に行うには、RRI データを少なくとも 2 分間以上計測すること、および ECG サンプリング周波数は 200Hz 以上とすることが推奨されています。\cite{藤原 幸一}
そのため、5分間心電図を取得し、保存します。
また、Polar H10はデータ取得開始時に、2秒ほど大きなドリフトがあるので、最初の2秒のデータはカットします。
みなさんで、試す際に変更する部分は、使用するデバイスの名前の部分です。ここには、Polar H10のセンサー上部側面にある固有IDを入力します。

\begin{figure}[h] % 'h' here, 't' top, 'b' bottom, 'p' page of floats.
\centering % to center the figure
\includegraphics[width=135mm]{Polar_sensor_id.JPG}
\caption{Polar H10のセンサーID} % Caption for the figure
\label{fig:ecg_drift} % Label to refer to the figure
\end{figure}


\begin{lstlisting}[language=Python]
# 使用するデバイスの名前
POLAR_H10_NAME = "Polar H10 B91CE12A"  

# ECGデータストリームのUUID
PMD_SERVICE = "FB005C80-02E7-F387-1CAD-8ACD2D8DF0C8"
PMD_CONTROL = "FB005C81-02E7-F387-1CAD-8ACD2D8DF0C8"
PMD_DATA = "FB005C82-02E7-F387-1CAD-8ACD2D8DF0C8"
ECG_WRITE = bytearray([0x02, 0x00, 0x00, 0x01, 0x82, 0x00, 0x01, 0x01, 0x0E, 0x00])

#受信したデータの処理
def data_conv(sender, data):
    print("Data received")
    if data[0] == 0x00:
        timestamp = convert_to_unsigned_long(data, 1, 8)
        step = 3
        samples = data[10:]
        offset = 0
        while offset < len(samples):
            ecg = convert_array_to_signed_int(samples, offset, step)
            offset += step
            ecg_session_data.extend([ecg])
            ecg_session_time.extend([timestamp])
.....

async def run():
    devices = await BleakScanner.discover()
    polar_h10_device = None

    # Polar H10デバイスの探索
    for device in devices:
        if device.name and POLAR_H10_NAME in device.name:
            print(f"Polar H10を見つけました: {device}")
            polar_h10_device = device
            break
        .....
    # Polar H10デバイスとの接続とデータ取得
    async with BleakClient(polar_h10_device) as client:
        # 探索時間20秒間
        await client.connect(timeout=20.0)
        await client.write_gatt_char(PMD_CONTROL, ECG_WRITE)
        await client.start_notify(PMD_DATA, data_conv)
        # 5分間ECGデータを収集
        await asyncio.sleep(300.0)
        await client.stop_notify(PMD_DATA)
        .....
\end{lstlisting}

\section{ECGの前処理}
\subsection{前処理の重要性}
次に、csv形式に記録した心電図を読み込み、plotしてみましょう。
全てをplotすると横幅に対してデータが多すぎるため、見にくいので一部をplotしてみます。

\begin{figure}[h] % 'h' here, 't' top, 'b' bottom, 'p' page of floats.
\centering % to center the figure
\includegraphics[width=135mm]{ecg_drift.png}
\caption{アーチファクトが生じている箇所} % Caption for the figure
\label{fig:ecg_drift} % Label to refer to the figure
\end{figure}


\subsection{アーチファクトの対処}
上の画像から分かる通り、心電図の基線（基軸）が上下に動揺する様子がわかります。
この動揺を含めた雑音は、アーチファクトと呼ばれ、目的のデータを取得する際に邪魔になります。
以下に、アーチファクトが起きている時の心電図の特徴と対処法をまとめました。

\subsection{基線動揺（ドリフト）}
\textbf{心電図の特徴}:
\begin{itemize}
    \item 心電図の基線が呼吸とともに、または呼吸と無関係に緩徐に上下する。
\end{itemize}
\textbf{データ取得時の対処方法}:
\begin{itemize}
    \item 被検者がリラックスできる環境を整える。
    \item 空調を調整し、室温を適切に保つ。
    \item 電極装着部位の皮膚を清拭し、汗を拭く。
\end{itemize}
\textbf{データ処理時の対処方法}:
\begin{itemize}
    \item bior2.6 waveletを適用し、ECGからベースラインドリフトと筋電の干渉を除去する。
    \item 0.03秒の時定数を持つフィルタを使用し、5Hz以下の低周波成分を減衰させる。
\end{itemize}

\subsection{筋電図混入}
\textbf{心電図の特徴}:
\begin{itemize}
    \item 振幅と周波数が不規則な波が心電図に混入する。
\end{itemize}
\textbf{データ取得時の対処方法}:
\begin{itemize}
    \item 被検者がリラックスするよう努め、寒さ対策を行う。
    \item 四肢の震えがある場合は、誘導の電極を適切に装着する。
\end{itemize}
\textbf{データ処理時の対処方法}:
\begin{itemize}
    \item bior2.6 waveletを適用して、ECGからの筋電の干渉を除去する。
\end{itemize}

\subsection{交流障害（ハム）}
\textbf{心電図の特徴}:
\begin{itemize}
    \item 50 Hzから80 Hzの規則的な波が心電図に混入する。
\end{itemize}
\textbf{データ取得時の対処方法}:
\begin{itemize}
    \item アース接続の確認と、不必要な電気機器の電源をオフにする。
    \item 誘導コードを整理し、併用機器との距離を適切に保つ。
\end{itemize}
\textbf{データ処理時の対処方法}:
\begin{itemize}
    \item 50 Hzと78 Hzに対して閾値フィルターを適用し、干渉を除去する。
\end{itemize}

このように、データ取得時およびデータ処理時の両方で対処方法を適用することで、心電図データの質を向上させ、より信頼性の高い解析結果を得ることが可能です。


\subsection{アーチファクトの対処の実装}
基線動揺(ドリフト)に対する対処を行ないます。
具体的には、時定数0.03秒のフィルタを適用します。
時定数フィルタ0.03秒のフィルタでは、約5Hz 以下(周期0. 2秒以上)の成分の振幅を1/2に減衰することができます。
そのため、ゆったりとした波であるドリフトを抑制することができます。

\begin{lstlisting}[language=Python]
# フィルタ設計用の関数
def design_highpass_filter(fs, cutoff_frequency):
    nyquist = 0.5 * fs
    normal_cutoff = cutoff_frequency / nyquist
    b, a = butter(1, normal_cutoff, btype='high', analog=False)
    return b, a

# 時定数からカットオフ周波数への変換
def time_constant_to_cutoff_frequency(time_constant):
    return 1 / (2 * np.pi * time_constant)
\end{lstlisting}




次に、筋電図混入への対処を行います。
具体的には、心電図に対して、bior2.6 waveletフィルタを適用して、筋電の干渉を除く関数を作ります。\cite{Ancheng他}
\begin{lstlisting}[language=Python]
# bior2.6フィルタの適用
def apply_bior2_6_filter(signal):
    """
    Uses bior2.6 wavelet decomposition to target and reduce EMG interference in ECG signals.
    
    Args:
    signal (array-like): The input ECG signal.
    fs (int): Sampling rate of the ECG signal.
    
    Returns:
    array-like: The signal with EMG interference reduced.
    """
    # ウェーブレットの選択
    wavelet = pywt.Wavelet('bior2.6')
    # 最大分解レベルの計算
    max_level = pywt.dwt_max_level(len(signal), wavelet.dec_len)
    # ウェーブレット分解
    coeffs = pywt.wavedec(signal, wavelet, level=max_level)
    
    # EMG干渉が想定される周波数成分を減衰させる
    # 通常、これらは中〜高周波数の詳細レベルに現れる
    # ここではレベル2からレベル4までの詳細係数を減衰させる
    # 減衰の度合いは実験的に調整が必要かもしれません
    for i in range(2, 5):
        coeffs[i] *= 0.5  # 係数を半減させることで干渉を減衰
    
    # ウェーブレット再構成
    filtered_signal = pywt.waverec(coeffs, wavelet)
    return filtered_signal


    # 閾値フィルタの適用
    def apply_notch_filters(signal, fs):
        f1 = 50
        f2 = 78
        
        # Quality factor
        Q = 30  # フィルターの鋭さ
        
        #50hzの閾値フィルターの作成と適用
        b1, a1 = iirnotch(f1, Q, fs)
        filtered_signal = lfilter(b1, a1, signal)
        
        b2, a2 = iirnotch(f2, Q, fs)
        filtered_signal = lfilter(b2, a2, filtered_signal)
        
        return filtered_signal
\end{lstlisting}

最後に、交流障害(ハム)についても対処します。
心電図に対する前処理を含んだ論文\cite{Ancheng他}の中で、このデータセットに対して、50 Hzと78 HzにThresholding Filters(閾値フィルター)を使用し、交流障害を取り除いているため、同様に適用します。
\begin{lstlisting}[language=Python]
# 閾値フィルタの適用
def apply_notch_filters(signal, fs):
    f1 = 50
    f2 = 78
    
    # Quality factor
    Q = 30  # フィルターの鋭さ
    
    #50hzの閾値フィルターの作成と適用
    b1, a1 = iirnotch(f1, Q, fs)
    filtered_signal = lfilter(b1, a1, signal)
    
    b2, a2 = iirnotch(f2, Q, fs)
    filtered_signal = lfilter(b2, a2, filtered_signal)
    
    return filtered_signal
\end{lstlisting}

これらの前処理の関数を適用し、CSV/ecg\_session\_data\_calm\_preprocessed.csvに保存します。

\section{RRIの前処理}
\subsection{前処理の必要性}
次に、心拍変動解析を行うために、心電図からRR間隔を算出していきます。
しかし、RR間隔でも、アーチファクトが存在するため、いくつかの前処理が必要になります。
まず、前処理が必要になる理由を知るために、RRIを算出し、plotしてみます。
\begin{lstlisting}[language=Python]
def calculate_rri(signal, sampling_rate):
    # R波のピークの初期検出
    out = ecg.ecg(signal=signal, sampling_rate=sampling_rate, show=False)
    initial_rpeaks = out['rpeaks']

    # R波のピークの補正
    rpeaks_hamilton = ecg.correct_rpeaks(signal=signal, rpeaks=initial_rpeaks, sampling_rate=sampling_rate)

    # RRIの計算（ミリ秒単位）
    rri = np.diff(rpeaks_hamilton) * 1000 / sampling_rate
    return rri
\end{lstlisting}


\subsection{アーチファクトの対処の実装}
期外収縮とは、出現するべき時点より少し早くR波が出現し、その後のR波は出現すべき部分に位置するので、RR間隔が短くなった後に通常の位置にR波が戻り、RR間隔が長くなるものです。
この時、RR間隔はスパイクのような動きになります。
この期外収縮を処理しないまま、心拍変動解析をしてしまうと、高周波数域(High Frequency)の値が大きくなってしまいます。
そのため、期外収縮が起きている部分は、前後の平均値で線形補間を行い、Normal-Normal間隔(NNI)を計算します。
NN間隔(NNI)とは、正常な心拍間の時間間隔を指し、期外収縮などの不整脈の影響を受けずに心拍変動の本質的な変動を捉えることができます。
また、最初と末尾のRR間隔の値は、正しく計算されていない可能性があるため、排除します。
ECGからRR間隔(RRI)を計算した際のコードに期外収縮と推定される値を取り除き、平均値で補間する関数を追加して、NN間隔のcsvを作ります。

\begin{lstlisting}[language=Python]
def calculate_nni(raw_rri):
    # 生のRR間隔データから外れ値(outlier)を除去する
    cleaned_rri = remove_outliers(rr_intervals=raw_rri, verbose=True)

    # 外れ値を除去したデータのNaN(欠損値)を線形補間で穴埋めする
    fill_nan_rri = interpolate_nan_values(rr_intervals=cleaned_rri, interpolation_method="linear")

    # 補間済みRR間隔データから異所性心拍(ectopic beat)を除去し、NN間隔を得る
    nn_intervals_list = remove_ectopic_beats(rr_intervals=fill_nan_rri, method="malik")

    # NN間隔のNaN(欠損値)を線形補間で穴埋めする 
    interpolated_nn_intervals = interpolate_nan_values(rr_intervals=nn_intervals_list)
    return interpolated_nn_intervals
\end{lstlisting}

\section{心拍変動解析 (HRV解析)}

心拍変動解析は、スペクトル解析が用いられ、高速フーリエ変換(FFT:Fast Fourier Transform)か、自己回帰モデルによるもので行います。心拍変動解析で得られる指標は、主に「時間領域指標」と「周波数領域指標」の2つに分けられます。
\subsection{時間領域指標}
時間領域指標は、RR間隔の時系列データから直接計算される指標です。RR間隔の平均値や標準偏差、連続するRR間隔の差からさまざまな統計量を求めます。

\begin{itemize}
\item \textbf{meanNN}: RRI の平均値
\item \textbf{SDNN}: RRI の標準偏差
\item \textbf{RMSSD}: 隣接する RRI の差の根平均二乗
\item \textbf{Total power}: RRI の分散
\item \textbf{NN50}: ある時間内に隣接する RRI の差が 50 msecを超えるペアの個数
\item \textbf{CVRR}: SDNNの値をRRIの平均値で割り、100を掛けた値
\item \textbf{pNN10-50}: 連続して隣接するRRIの差が10-50msを超える心拍の割合
\end{itemize}


\subsection{周波数領域指標}
周波数領域指標は、RR間隔の時系列データに対して高速フーリエ変換などの周波数解析を行い、パワースペクトル密度から求められる指標です。特定の周波数帯域のパワーを算出することで、交感神経や副交感神経活動の程度を評価できます。
\begin{itemize}
\item \textbf{LF (低周波数帯域)}: パワースペクトルの0.04Hz-0.15Hz領域。交感神経と副交感神経の活動を反映
\item \textbf{HF (高周波数帯域)}: パワースペクトルの0.15Hz-0.4Hz領域。副交感神経の活動を反映
\item \textbf{LF/HF}: LFとHFの全体バランスを示す。交感神経と副交感神経のバランスを反映
\end{itemize}

\subsection{パワースペクトラムの計算}
以下のPythonコードは、RR間隔の時系列データからパワースペクトラム密度（PSD）を計算する方法を示しています。
これにより、上で示した周波数成分指標を取得できます。
\begin{lstlisting}[language=Python]
# PSDのplot
nni = np.array(nni_list)
hrvanalysis.plot.plot_psd(nni)
\end{lstlisting}

\subsection{時間領域指標・周波数領域指標の実装}
\begin{lstlisting}[language=Python]
# 心拍変動解析の適用
def apply_hrv(nni_list):
    hrv_data_list = []
    #時間領域指標の算出
    time_domain_data = hrvanalysis.extract_features.get_time_domain_features(nn_intervals=nni)
    #周波数領域指標の算出
    frequency_domain_data = hrvanalysis.extract_features.get_frequency_domain_features(nn_intervals=nni, method='welch', sampling_frequency=4, interpolation_method='linear')
    hrv_data = dict(time_domain_data, **frequency_domain_data)
    hrv_data_list.append([hrv_data])
    return hrv_data_list
\end{lstlisting}

実際に得られた結果は、このようになります。
\begin{itemize}
    \item Mean NNI: 832.34 ms
    \item SDNN: 84.49 ms
    \item CCVTP: 0.1015
    \item SDSD: 54.43 ms
    \item NNI 50: 110
    \item PNNI 50: 31.34\%
    \item NNI 20: 254
    \item PNNI 20: 72.36\%
    \item RMSSD: 54.43 ms
    \item Median NNI: 823.08 ms
    \item Range NNI: 476.92 ms
    \item CVSD: 0.0654
    \item CVNNI: 0.1015
    \item Mean HR: 72.80 bpm
    \item Max HR: 92.86 bpm
    \item Min HR: 53.42 bpm
    \item Std HR: 7.11 bpm
    \item LF: 2615.16 ms\(^2\)
    \item HF: 719.32 ms\(^2\)
    \item LF/HF Ratio: 3.64
    \item LFnu: 78.43\%
    \item HFnu: 21.57\%
    \item Total Power: 4423.72 ms\(^2\)
    \item VLF: 1089.24 ms\(^2\)
\end{itemize}


\section{疲労・ストレス解析}
\subsection{心拍変動解析から得られる主な指標と、それらが示す生理学的意味}
\subsubsection{時間領域指標}
\begin{itemize}
\item \textbf{SDNN}: 心拍変動の全体的な大きさを反映し、副交感神経活動の指標。ストレス耐性の指標ともされる。
\item \textbf{RMSSD}: 短期的な副交感神経活動の指標。
\item \textbf{pNN50}: 心拍変動の大きな変化を捉え、副交感神経緊張の指標。
\end{itemize}
\subsubsection{周波数領域指標}
\begin{itemize}
\item \textbf{LF (低周波数帯域)}: 交感神経と副交感神経の相対的活動を反映。ストレスを受けると低下す
\item \textbf{HF (高周波数帯域)}: 副交感神経活動を反映。不安や疲労で低下
\item \textbf{LF/HF}: 交感神経と副交感神経のバランスを示す。
\end{itemize}
\subsubsection{その他の指標}
\begin{itemize}
\item \textbf{TP (Total Power)}: 自律神経機能全体の活動量を反映。低下は慢性的ストレスを意味する。
\item \textbf{LFnu、HFnu}: 交感神経、副交感神経それぞれの自律神経活動における相対的寄与度。
\item \textbf{CCVTP、CCVHF}: 年齢や疲労・ストレスの影響を補正した自律神経機能の指標。
\end{itemize}

これらの指標を用いて、ストレスや疲労、自律神経のバランス状態を総合的に評価することができます。

特に、\textbf{CCVTP} (Component Coefficient of Variance of Total Power) は、総心拍変動量 (TP) の変動成分の大きさを表す指標です。TPは自律神経機能全体の活動量を反映しますが、単純にTP値が高いということは必ずしも良いわけではありません。心拍数が多い場合にはTPが高く出る傾向にあるため、CCVTPの値が高いほど、自律神経の調節能力が高く、ストレスや疲労に強い状態であることを示します。健康で若い人ほど数値が高く、加齢や慢性的ストレスの蓄積に伴い低下していきます。

\subsection{わかること}

心拍変動解析から得られる指標を通じて、私の現在の健康状態とストレスレベルを評価することができました。以下に、具体的な解析結果とそれが私にどのように関連しているかを示します：

\begin{itemize}
    \item \textbf{高いLF/HF比率}：この比率が3.64であったことは、交感神経が副交感神経に比べて優位にある状態を示しています。
    平均が、0.8~2.0のようなので、かなりストレスが高いことがわかります。この原稿を締め切りギリギリで書いている焦燥感が現れてしまったのかもしれません。
    
    \item \textbf{SDNNとRMSSDの値}：SDNNが84.49 ms、RMSSDが54.43 msであったことから、私の心拍変動の全体的な大きさと短期的な副交感神経活動が比較的保たれていることがわかります。

    \item \textbf{NNIの変動}：Median NNIが823.08 msであり、Range NNIが476.92 msであったことから、日々の活動中に心拍数の変動が大きいことが示されています。これはさまざまな状況への適応能力が高いことを意味する可能性がありますが、一方で不規則な生活リズムが原因の可能性も考えられます。

    \item \textbf{Total Powerの高値}：Total Powerが4423.72 ms\(^2\)であり、自律神経系の総活動量が高いことを示しています。これは心拍変動が豊かであり、ストレス耐性があることを示していると解釈できますが、高ストレス状態が継続している場合には注意が必要になります。
\end{itemize}

このように心拍変動指標を見ることで、ある程度ストレス度合いを見ることができます。
心電図の前処理から心拍変動解析までとても長かったですが、前処理は何においても重要なので、前処理だけでも抑えていただければ幸いです。

\chapter{まとめ}
本書では、まず心電図とRR間隔のデータの前処理を行いました。その後、心拍変動（HRV）解析を用いて、ストレスの状態を分析しました。
心電図とRR間隔の前処理さえマスターすれば、ストレス解析だけでなく、同じく自律神経系の活動を反映する感情などの推定を行う機械学習モデルなども作成できると考えています。

心電図データを用いた研究は、まだ発展途上ですが、読者の皆様がこの知識を活かして、新たな発見やアプリケーションを創出するきっかけになれば幸いです。
\chapter{参考}

\begin{thebibliography}{99}
\bibitem{Ancheng他}
 Ancheng Fang, Fan Pan, Weichuang Yu, Linkun Yang, Peiyu He,ECG-based emotion recognition using random convolutional kernel method,Biomedical Signal Processing and Control,Volume 91,2024,105907,ISSN 1746-8094,https://doi.org/10.1016/j.bspc.2023.105907.

 \bibitem{藤原 幸一}
 藤原 幸一, ヘルスモニタリングのための心拍変動解析, システム／制御／情報, 2017, 61 巻, 9 号, p. 381-386, 公開日 2018/03/21, Online ISSN 2424-1806, Print ISSN 0916-1600, https://doi.org/10.11509/isciesci.61.9\_381, https://www.jstage.jst.go.jp/article/isciesci/61/9/61\_381/\_article/-char/ja.

 \bibitem{心電図画像}
https://www.kango-roo.com/ki/image\_1686/.
 
 
\end{thebibliography}



\end{document}


\begin{lstlisting}[language=Python]
ここにコード
\end{lstlisting}